tonediff [1,1] <- 0.001
upset(as.data.frame(tonediff<0.05)*1, sets = rev(workflows), sets.x.label = "Differentially abundant proteins",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset", keep.order=T)
UpSetR:::FindStartEnd
### Needed to overwrite function used by upset function to select the columns. A first columns with only one value was surpressed
FindStartend <- function(data) {
c(1,ncol(data))
}
# reversing column order
tonediff <- onediff[, ncol(onediff):1]
upset(as.data.frame(tonediff<0.05)*1, sets = rev(workflows), sets.x.label = "Differentially abundant proteins",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset", keep.order=T)
FindStartend(onediff)
UpSetR:::FindStartend(onediff)
UpSetR:::FindStartend(onediff)
### Needed to overwrite function used by upset function to select the columns. A first columns with only one value was surpressed
FindStartEnd <- function(data) {
c(1,ncol(data))
}
# reversing column order
tonediff <- onediff[, ncol(onediff):1]
upset(as.data.frame(tonediff<0.05)*1, sets = rev(workflows), sets.x.label = "Differentially abundant proteins",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset", keep.order=T)
UpSetR:::FindStartEnd(onediff)
ncol(onediff)
FindStartEnd(onediff)
### Needed to overwrite function used by upset function to select the columns. A first columns with only one value was surpressed
UpSetR:::FindStartEnd <- function(data) {
c(1,ncol(data))
}
UpSetR:::FindStartEnd
### Needed to overwrite function used by upset function to select the columns. A first columns with only one value was surpressed
UpSetR::FindStartEnd <- function(data) {
c(1,ncol(data))
}
### Needed to overwrite function used by upset function to select the columns. A first columns with only one value was surpressed
FindStartEnd <- function(data) {
c(1,ncol(data))
}
tonediff
# reversing column order
tonediff <- onediff[, ncol(onediff):1]
upset(as.data.frame(tonediff<0.05)*1, sets = rev(workflows), sets.x.label = "Differentially abundant proteins",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset", keep.order=T)
upset
assignInNamespace("FindStartEnd", FindStartEnd, ns="UpsSetR")
assignInNamespace("FindStartEnd", FindStartEnd, ns="UpSetR")
# reversing column order
tonediff <- onediff[, ncol(onediff):1]
upset(as.data.frame(tonediff<0.05)*1, sets = rev(workflows), sets.x.label = "Differentially abundant proteins",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset", keep.order=T)
upset(as.data.frame(tonediff[!grepl("ups", rownames(onediff)), ]<0.05)*1,
sets = rev(workflows), sets.x.label = "Total number\nper workflow",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA6666",
mainbar.y.label = "Proteins in subset")
grid.text("Differentially abundant yeast proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
rev(workflows)
upset(as.data.frame(tonediff[!grepl("ups", rownames(onediff)), ]<0.05)*1,
sets = rev(workflows), sets.x.label = "Total number\nper workflow",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA6666",
mainbar.y.label = "Proteins in subset", keep.order=T)
upset(as.data.frame(tonediff[grepl("ups", rownames(onediff)), ]<0.05)*1, sets = rev(workflows),
sets.x.label = "Total number\nper workflow",
sets.bar.color = rev(c_workflows), main.bar.color = "#6666AA",
mainbar.y.label = "Proteins in subset", keep.order=T)
folder <- "~/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009815/0.9.1/"
#folder <- "~/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD005507/0.9.2/"
#folder <- "~/devel/Bioinformatics/ELIXIR_EDAM/WOMBAT-P/WOMBAT-P_Processed/PXD009203/0.9.2/"
# Set workflow names
workflows <- c("compomics","maxquant","proline", "tpp")
# Function to load results from JSON files
loadWorkflowResults <- function(folder, workflows) {
results <- list()
allnames <- NULL
for (w in workflows) {
r <- unlist(read_yaml(file.path(folder, paste0("benchmarks_", w, ".json"))))
if (r[11] == 0)
r <- r[-11:-12]
results[[w]] <- r
names(results[[w]]) <- make.unique(names(r))
allnames <- append(allnames, names(results[[w]]))
}
allnames <- unique(allnames)
return(list(results = results, allnames = allnames))
}
# Load results
resultsData <- loadWorkflowResults(folder, workflows)
results <- resultsData$results
allnames <- resultsData$allnames
# Read the 'ups_prots.csv' file
ups <- try(read.csv("../ups_prots.csv")[, 2])
# Create the benchmark matrix
createBenchmarkMatrix <- function(results, allnames, workflows) {
benchmatrix <- matrix(NA, ncol = length(allnames), nrow = length(workflows),
dimnames = list(rows = workflows, cols = allnames))
benchmatrix <- as.data.frame(benchmatrix)
for (w in workflows) {
r <- results[[w]]
benchmatrix[w, names(r)] <- r
}
return(benchmatrix)
}
# Load and create benchmark matrix
benchmatrix <- createBenchmarkMatrix(results, allnames, workflows)
# Calculate the number of peptides per proteins
peps_per_prot <- benchmatrix[,grep("Functionality.Performance.Identification.PeptidesPerProtein.Freq", colnames(benchmatrix))]
for (i in 1:ncol(peps_per_prot))
peps_per_prot[,i] <- as.numeric(peps_per_prot[,i])
barplot(as.matrix(peps_per_prot), names.arg = 1:ncol(peps_per_prot), legend.text = workflows,
main="Peptides per protein distribution", beside=T, border=0, xlab="Number of peptides")
# colors
c_workflows <- brewer.pal(4, "Set1")
c_types <- c("#20a3ff", "#c44601", "#0035f0", "#f57600")
# Define a function to create lollipop charts
createLollipopChart <- function(dat, title, subtitle) {
dat$Metric <- gsub("[A-Z,a-z]*\\.","", dat$Metric)
print(dat)
g <- ggplot(dat, aes(x = Workflow, y = value, color = Metric)) +
geom_segment(aes(xend = Workflow, yend = 0), size = 1, position = position_dodge(width = 0.5)) +
geom_point(size = 5,  position = position_dodge(width = 0.5)) +
geom_text(aes(label = round(value, max(0, round(log(1/min(value)))))), size = 3, vjust = -0.5, hjust=1, position = position_dodge(width = 0.9)) +
labs(title = title, subtitle = subtitle, x = "") +
theme(legend.title = element_blank()) +
scale_color_manual(values = c_types) +
theme_light() +
theme(axis.text.x = element_text(colour = c_workflows, size = 12, hjust = 1, vjust = 0.5, angle = 90, face = "bold"))
return(g)
}
# Metrics for lollipop charts
metrics_list <- list(
list(sel = c("Functionality.Performance.Identification.PeptideNumber", "Functionality.Performance.Identification.ProteinNumber"),
title = "A) Quantification depth", subtitle = "Fraction quantified in all samples"),
list(sel = c("Functionality.Performance.Identification.ProteinCoverage", "Functionality.Performance.Identification.PeptideCoverage"),
title = "B) Coverage", subtitle = "Fraction quantified in all samples"),
list(sel = c("Functionality.Performance.Quantification.CVPeptides", "Functionality.Performance.Quantification.CVProteins",
"Functionality.Performance.Quantification.CorrelationPeptides", "Functionality.Performance.Quantification.CorrelationProteins"),
title = "C) Variance and similarity", subtitle = "Pearson correlation and coefficient of variance"),
list(sel = c("Functionality.Performance.Quantification.DynamicPeptideRange", "Functionality.Performance.Quantification.DynamicProteinRange"),
title = "D) Dynamic range", subtitle = "Ratio between highest and lowest abundance")
)
# Create lollipop charts
prep_bmatrix <- melt(t(benchmatrix))
colnames(prep_bmatrix) <- c("Metric", "Workflow", "value")
prep_bmatrix$value <- as.numeric(prep_bmatrix$value)
lollipop_charts <- lapply(metrics_list, function(metric_info) {
sel <- metric_info$sel
dat <- prep_bmatrix[prep_bmatrix$Metric %in% sel, ]
createLollipopChart(dat, metric_info$title, metric_info$subtitle)
})
# Arrange lollipop charts in a grid
grid.arrange(grobs = lollipop_charts, ncol = 2)
# Quantative evaluation of proteins
proteins <- s_proteins <- NULL
for (w in workflows) {
p <- read.csv(paste0(folder, "/stand_prot_quant_merged",w,".csv"))
# remove contaminants
p <- p[!grepl("CON_",p$protein_group),]
# fix for compomics
p <- p[!is.na(p$protein_group),]
pg <- p$protein_group
pg <- gsub("sp\\|","",pg)
pg <- gsub(",",";",pg)
pg <- gsub(" ","",pg)
pg <- gsub("\\|[A-Z,0-9]*_YEAST","",pg)
pg <- gsub("\\|[A-Z,0-9]*_HUMAN_UPS","",pg)
pg <- gsub("\\|[A-Z,0-9]*_HUMAN","",pg)
rownames(p) <- pg
p <- p[,2:ncol(p)]
colnames(p) <- paste(w, colnames(p))
s_proteins[[w]] <- p[, grep(" abundance_", colnames(p))]
if(length(proteins) > 0) {
proteins <- merge(proteins, p, by.x=1, by.y=0, all=T)
} else {
proteins <- cbind(rownames(p), p)
}
# remove empty columns
proteins <- proteins[, colSums(!is.na(proteins)) > 0]
}
rownames(proteins) <- proteins[,1]
# Select columns containing 'abundance_'
qproteins <- proteins[, grep(" abundance_", colnames(proteins))]
qproteins <- as.matrix(qproteins)
# Filter out rows with 'REV_' and 'CON_' in row names
qproteins <- qproteins[!grepl("REV_|CON_", rownames(qproteins)),]
# Extract only the first differential abundance q-value column of each workflow
diff_proteins <- as.matrix(proteins[, grep("differential_abundance_qvalue", colnames(proteins))])
if (grepl("PXD009815", folder)) {
diff_proteins <- diff_proteins[, grep("10\\.amol",colnames(diff_proteins))]
diff_proteins <- diff_proteins[, grep("500\\.amol",colnames(diff_proteins))]
} else  {
ttt <- NULL
for (w in workflows) {
ttt <- cbind(ttt, diff_proteins[,grep(w, colnames(diff_proteins))[1]])
}
diff_proteins <- ttt
}
colnames(diff_proteins) <- workflows
# Setting side colors for sample types and workflows
colnames(qproteins) <- gsub("\\.", "_", colnames(qproteins))
col_classes <- sub("_[0-9]*$","",colnames(qproteins))
sample_types <- sub(paste(paste0(workflows, " "), collapse="|"), "", col_classes)
# Remove unwanted strings from sample types (UPS data)
sample_types <- gsub("X|CT_mixture_QY_|_CN_UPS1_CV_Standards_Research_Group", "", sample_types)
# Conditional coloring of sample types
if(all(grepl("(amol)|(fmol)", sample_types))) {
n_sample_types <- paste0("abundance_", c(paste0(c(10, 50, 100, 250, 500), "_amol"),
paste0(c(1, 5, 10, 25, 50), "_fmol")))
c_sample_types <- as.factor(sample_types)
n_sample_types <- unique(sort(sample_types))
} else {
c_sample_types <- as.factor(sample_types)
n_sample_types <- unique(sort(sample_types))
}
# Define sample type and workflow colors
c_sample_types <- colorpanel(length((n_sample_types)), "#115f9a", "#76c68f", "#d0f400")[c_sample_types]
workflow_types <- str_extract( col_classes, paste(workflows, collapse="|"))
c_workflow_types <- brewer.pal(4, "Set1")[as.factor(workflow_types)]
# Heatmap plot of presence/absence
heatmap.2(1-as.matrix(dist(t(!is.na(qproteins))/nrow(qproteins), method="manhattan")), scale="none", trace="none",
col=colorpanel(50, "white", "black"), ColSideColors = c_sample_types, RowSideColors = c_workflow_types,
srtCol = 45, srtRow = 45, cexRow=40/ncol(qproteins), cexCol=40/ncol(qproteins),
sepwidth=c(0,0), sepcolor = NA, key=T, keysize=1.5, labRow = "", labCol = "", xlab="Sample types",
ylab = "Workflows")
legend("topright", fill=colorpanel(length(unique(sample_types)), "#115f9a", "#76c68f", "#d0f400"),
legend=n_sample_types, xpd=TRUE, cex=0.8, border=0)
legend("bottomleft", fill=brewer.pal(4, "Set1"),
legend=workflows, xpd=TRUE, cex = 0.8, border=0)
# Heatmap plot of correlation between quantitative values
heatmap.2(cor((qproteins), use="pairwise.complete.obs"), trace="none", scale="none",
col=colorpanel(50, "red", "white", "blue"), ColSideColors = c_sample_types, RowSideColors = c_workflow_types,
srtCol = 45, srtRow = 45, cexRow=40/ncol(qproteins), cexCol=40/ncol(qproteins), rowsep=0, colsep=0,
labRow = "", labCol = "", xlab="Sample types",
ylab = "Workflows")
legend("topright", fill=colorpanel(length(unique(sample_types)), "#115f9a", "#76c68f", "#d0f400"),
legend=n_sample_types, xpd=TRUE, cex=0.8, border=0)
legend("bottomleft", fill=brewer.pal(4, "Set1"),
legend=workflows, xpd=TRUE, cex = 0.8, border=0)
### Now on statistical test results
# Replace NA values in diff_proteins with 1
diff_proteins[is.na(diff_proteins)] <- 1
# Filter diff_proteins for 5% FDR threshold
diff_proteins_5perc <- diff_proteins[rowSums(diff_proteins < 0.05) > 0,]
# Filter diff_proteins for 1% FDR threshold
diff_proteins_1perc <- diff_proteins[rowSums(diff_proteins < 0.01) > 0,]
# Extract workflow names from selected columns
workflow_names <- str_extract(colnames(diff_proteins_5perc), paste(workflows, collapse = "|"))
# Define colors for workflow types
c_workflow_types <- brewer.pal(4, "Set1")[as.factor(workflow_names)]
# Select relevant columns based on folder name
onediff <- diff_proteins[, ]
onediff <- onediff[, ]
#Calculate true FDR per and across workflows (only if ups proteins with ground thruth)
fdrs <- colSums(onediff[!grepl("ups", rownames(onediff)),] < 0.05) / colSums(onediff < 0.05)
workflow_fdr <- sum(rowMeans(onediff[!grepl("ups", rownames(onediff)),]) < 0.05) / sum(rowMeans(onediff) < 0.05)
# Calculate FDR for a range of threshold values
fdr_sum <- num_diff <- data.frame()
fdr_range <- 10^seq(-5, 0, 0.01)
for (i in fdr_range) {
fdr_sum <- rbind(fdr_sum, colSums(onediff[!grepl("ups", rownames(onediff)),] < i) / colSums(onediff < i))
num_diff <- rbind(num_diff, colSums(onediff < i))
}
# Create a plot for true FDR vs FDR thresholds (only for ground truth data)
plot(fdr_range, fdr_sum[,1], log="x", ylim=c(min(na.omit(fdr_sum)),1), col=brewer.pal(4, "Set1")[1],
type="l", lty=2, xlab="FDR threshold", ylab="True FDR")
lines(fdr_range, fdr_sum[,2], col=brewer.pal(4, "Set1")[2], type="l", lty=2)
lines(fdr_range, fdr_sum[,3], col=brewer.pal(4, "Set1")[3], type="l", lty=2)
lines(fdr_range, fdr_sum[,4], col=brewer.pal(4, "Set1")[4], type="l", lty=2)
legend("topleft", fill=brewer.pal(4, "Set1"), legend=workflows, border=NA)
legend(7e-6, 0.6, lty=c(1,2), legend=c("Proteins", "True FDR"))
par(new=T)
# Overlay the plot with number of proteins
plot(fdr_range, num_diff[,1], ylim=c(0,max(num_diff, na.rm=T)), type="l",
col=brewer.pal(4, "Set1")[1], axes=F, log="x", lwd=1, xlab="", ylab="")
axis(4, ylim=c(range(num_diff)))
mtext("Number of proteins", 4)
lines(fdr_range, num_diff[,2], type="l", col=brewer.pal(4, "Set1")[2], lwd=1)
lines(fdr_range, num_diff[,3], type="l", col=brewer.pal(4, "Set1")[3], lwd=1)
lines(fdr_range, num_diff[,4], type="l", col=brewer.pal(4, "Set1")[4], lwd=1)
# Pairs plot comparing FDR values
pairs(log10(diff_proteins), cex=.5, col="#00000099")
## UpSet plot comparing the performance
colnames(onediff) <- workflows
common_font_size <- 6
# reversing column order
tonediff <- onediff[, ncol(onediff):1]
upset(as.data.frame(tonediff<0.05)*1, sets = rev(workflows), sets.x.label = "Differentially abundant proteins",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA66AA", mainbar.y.label = "Proteins in subset", keep.order=T)
grid.text("Differentially abundant proteins, FDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
upset(as.data.frame(tonediff[!grepl("ups", rownames(onediff)), ]<0.05)*1,
sets = rev(workflows), sets.x.label = "Total number\nper workflow",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA6666",
mainbar.y.label = "Proteins in subset", keep.order=T)
grid.text("Differentially abundant yeast proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
pdf("Figure3DiffRegUPS_1.pdf", width=4, height=4)
upset(as.data.frame(tonediff[!grepl("ups", rownames(onediff)), ]<0.05)*1,
sets = rev(workflows), sets.x.label = "Total number\nper workflow",
sets.bar.color = rev(c_workflows), main.bar.color = "#AA6666",
mainbar.y.label = "Proteins in subset", keep.order=T)
grid.text("Differentially abundant yeast proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
dev.off()
pdf("Figure3DiffRegUPS_2.pdf", width=4, height=4)
upset(as.data.frame(tonediff[grepl("ups", rownames(onediff)), ]<0.05)*1, sets = rev(workflows),
sets.x.label = "Total number\nper workflow",
sets.bar.color = rev(c_workflows), main.bar.color = "#6666AA",
mainbar.y.label = "Proteins in subset", keep.order=T)
grid.text("Differentially abundant UPS proteins\nFDR < 0.05",x = 0.65, y=0.95, gp=gpar(fontsize=common_font_size))
dev.off()
getwd()
runApp('~/devel/Bioinformatics/DataAnalysis/ShinyApps/OmicsQ')
runApp('~/devel/Bioinformatics/DataAnalysis/ShinyApps/OmicsQ')
runApp('~/devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
RawTable <- read.csv("Analysis/Bat cardiolipin KO/Test.csv")
RawTable <- read.csv("Analysis/Bat cardiolipin KO/Test.csv")
boxplot(RawTable[,2:13], main="Raw data output")
RawTable <- read.csv("Analysis/Bat cardiolipin KO/Test.csv")
RawTable[RawTable == 0] <- NA
# make space for 4 figures
par(mfrow=c(2,2))
hist(RawTable[,3], main= "histogram of 2nd column")
hist(RawTable[,8], main= "histogram of 7th column")
plot(density(na.omit(RawTable[,2])), main= "density of 1st column")
plot(density(na.omit(RawTable[,3])), main= "density of 2nd column")
plot(density(na.omit(RawTable[,8])), main= "density of 7th column")
par(mfrow=c(1,1))
dev.off()
dev.off()
# make space for 4 figures
par(mfrow=c(2,2))
hist(RawTable[,2], main= "histogram of 1st column")
hist(RawTable[,3], main= "histogram of 2nd column")
hist(RawTable[,8], main= "histogram of 7th column")
plot(density(na.omit(RawTable[,2])), main= "density of 1st column")
NormalizedTable[NormalizedTable == -Inf] <- NA
logTable <- log2(RawTable[,2:13])
names(RawTable)
RawTable <- read.csv("Analysis/Bat cardiolipin KO/Test.csv")
#head(RawTable)
colnames(RawTable)
RawTable[RawTable == 0] <- NA
boxplot(RawTable[,5:ncol(RawTable)], main="Raw data output")
hist(RawTable[,5], main= "histogram of 1st column")
hist(RawTable[,6], main= "histogram of 2nd column")
logTable <- log2(RawTable[,5:16])
boxplot(logTable, main="log-transformed data")
# make space for 4 figures
par(mfrow=c(2,2))
hist(logTable[,1])
hist(logTable[,1])
hist(logTable[,2])
hist(logTable[,1])
hist(logTable[,2])
hist(logTable[,6])
hist(logTable[,6])
hist(logTable[,7])
# Normalization by sum
for (c in 5:16)
RawTable[,c] <- RawTable[,c]/sum(RawTable[,c],na.rm=T)
NormalizedTable <- cbind(RawTable[,1],log2(RawTable[,5:16]))
NormalizedTable[NormalizedTable == -Inf] <- NA
boxplot(NormalizedTable[,2:ncol(NormalizedTable)], main="log-transformed and normalized data")
pca.out <- princomp(na.omit(NormalizedTable[,2:13]))
pca.out <- princomp(na.omit(NormalizedTable[,5:16]))
plot(pca.out$loadings, main="PCA full data")
text(pca.out$loadings, colnames(NormalizedTable[,5:16]),cex=0.7)
pca.out <- princomp(na.omit(NormalizedTable[,5:16]))
pca.out <- princomp(NormalizedTable[complete.cases(NormalizedTable),5:16])
pca.out <- princomp(NormalizedTable[complete.cases(NormalizedTable),2:13])
plot(pca.out$loadings, main="PCA full data")
text(pca.out$loadings, colnames(NormalizedTable[,2:13]),cex=0.7)
plot(pca.out$loadings, main="PCA annotated only")
NormalizedTable <- NormalizedTable[rowSums(is.na(NormalizedTable[,2:13])) < 5,]
heatmap(as.matrix(NormalizedTable[,2:13]), labRow = NormalizedTable[,1], main="Full data", cexRow=0.1)
heatmap(as.matrix(NormalizedTable[,2:13]), labRow = NormalizedTable[,1], scale="none", main="Full data", cexRow=0.1)
RedTable <- NormalizedTable[grep("_conf|carnitine",NormalizedTable[,1]),]
heatmap(as.matrix(RedTable[RedTable[,1] != "",2:13]), labRow = RedTable[RedTable[,1] != "",1], main="acyl carnites")
NormalizedTable[,1]
RawTable$row.identity..main.ID.
NormalizedTable <- cbind(RawTable$row.identity..main.ID.,log2(RawTable[,5:16]))
NormalizedTable[NormalizedTable == -Inf] <- NA
boxplot(NormalizedTable[,2:ncol(NormalizedTable)], main="log-transformed and normalized data")
RedTable <- NormalizedTable[grep("_conf|carnitine",NormalizedTable[,1]),]
heatmap(as.matrix(RedTable[RedTable[,1] != "",2:13]), labRow = RedTable[RedTable[,1] != "",1], main="acyl carnites")
grep("_conf|carnitine",NormalizedTable[,1])
grep("_conf|carnitine",NormalizedTable[,1], value=T)
RedTable <- NormalizedTable[grep("_conf&carnitine",NormalizedTable[,1]),]
heatmap(as.matrix(RedTable[RedTable[,1] != "",2:13]), labRow = RedTable[RedTable[,1] != "",1], main="acyl carnites")
NormalizedTable[grep("_conf&carnitine",NormalizedTable[,1]),]
grep("_conf&carnitine",NormalizedTable[,1])
RedTable <- NormalizedTable[grep("_conf|carnitine",NormalizedTable[,1]),]
heatmap(as.matrix(RedTable[RedTable[,1] != "",2:13]), labRow = RedTable[RedTable[,1] != "",1], main="acyl carnites")
RedTable
table(rowSums(is.na(RedTable)))
RedTable <- RedTable[rowSums(is.na(RedTable)) < 6,]
heatmap(as.matrix(RedTable[RedTable[,1] != "",2:13]), labRow = RedTable[RedTable[,1] != "",1], main="acyl carnites")
library(perm)
pvalues <- pvalues2 <-  NULL
group1 <- which(colnames(NormalizedTable) %in% paste0("X",c(124,142,144,116,108,140),".mzXML.Peak.area")) - 1 # as first column will be removed
group2 <- which(colnames(NormalizedTable) %in% paste0("X",c(138,114,122,146,120,136),".mzXML.Peak.area")) - 1
for (r in 1:nrow(NormalizedTable)) {
compound <- unlist(NormalizedTable[r,2:13])
if (sum(is.na(compound))< 5) {
pvalues <- append(pvalues, t.test(compound[group1], compound[group2])$p.value)
pvalues2 <- append(pvalues2, permTS(compound[group1], compound[group2])$p.value)
} else {
pvalues <- append(pvalues, NA)
pvalues2 <- append(pvalues2, NA)
}
}
for (r in 1:nrow(NormalizedTable)) {
compound <- unlist(NormalizedTable[r,2:13])
if (sum(is.na(compound))< 5) {
pvalues <- append(pvalues, t.test(compound[group1], compound[group2])$p.value)
pvalues2 <- append(pvalues2, permTS(compound[group1], compound[group2])$p.value)
} else {
pvalues <- append(pvalues, NA)
pvalues2 <- append(pvalues2, NA)
}
}
print("Uncorrected p-values with p<0.001")
na.omit(NormalizedTable[NormalizedTable[,1] != "" &  pvalues<0.001,1])
pvalues <- pvalues2 <-  NULL
group1 <- which(colnames(NormalizedTable) %in% paste0("X",c(124,142,144,116,108,140),".mzXML.Peak.area")) - 1 # as first column will be removed
group1
group2 <- which(colnames(NormalizedTable) %in% paste0("X",c(138,114,122,146,120,136),".mzXML.Peak.area")) - 1
for (r in 1:nrow(NormalizedTable)) {
compound <- unlist(NormalizedTable[r,2:13])
if (sum(is.na(compound))< 5) {
pvalues <- append(pvalues, t.test(compound[group1], compound[group2])$p.value)
pvalues2 <- append(pvalues2, permTS(compound[group1], compound[group2])$p.value)
} else {
pvalues <- append(pvalues, NA)
pvalues2 <- append(pvalues2, NA)
}
}
print("Uncorrected p-values with p<0.001")
na.omit(NormalizedTable[NormalizedTable[,1] != "" &  pvalues<0.001,1])
head(NormalizedTable)
NormalizedTable[NormalizedTable[,1] != "" &  pvalues<0.001,1]
na.omit(
na.omit(NormalizedTable[NormalizedTable[,1] != "" &  pvalues<0.001,1])
bh1 <- p.adjust(pvalues,method="BH")
bh1 <- p.adjust(pvalues,method="BH")
bonf1 <- p.adjust(pvalues,method="bonferroni")
bh2 <- p.adjust(pvalues2,method="BH")
bonf2 <- p.adjust(pvalues2,method="bonferroni")
# show significant metabolites
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh1 <0.001,1])
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bonf1 <0.001,1])
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh2 <0.001,1])
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bonf2 <0.001,1])
par(mfrow=c(1,3))
plot(bh1, bh2, log="xy", xlab="BH t-test", ylab="BH permutation test")
plot(bonf1, bonf2, log="xy",xlab="Bonferroni t-test", ylab="Bonferroni permutation test")
plot(bh1, bonf1, xlab="BH t-test", ylab="Bonferroni t-test")
par(mfrow=c(1,1))
# show significant metabolites
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh1 <0.001,1])
length(na.omit(NormalizedTable[NormalizedTable[,1] != "" &  pvalues<0.001,1]))
bh1 <- p.adjust(pvalues,method="BH")
bonf1 <- p.adjust(pvalues,method="bonferroni")
bh2 <- p.adjust(pvalues2,method="BH")
bonf2 <- p.adjust(pvalues2,method="bonferroni")
# show significant metabolites
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh1 <0.001,1])
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bonf1 <0.001,1])
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh2 <0.001,1])
na.omit(NormalizedTable[NormalizedTable[,1] != "" & bonf2 <0.001,1])
par(mfrow=c(1,3))
plot(bh1, bh2, log="xy", xlab="BH t-test", ylab="BH permutation test")
plot(bonf1, bonf2, log="xy",xlab="Bonferroni t-test", ylab="Bonferroni permutation test")
plot(bh1, bonf1, xlab="BH t-test", ylab="Bonferroni t-test")
# show significant metabolites
length(na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh1 <0.001,1]))
length(na.omit(NormalizedTable[NormalizedTable[,1] != "" & bonf1 <0.001,1]))
length(na.omit(NormalizedTable[NormalizedTable[,1] != "" & bh2 <0.001,1]))
length(na.omit(NormalizedTable[NormalizedTable[,1] != "" & bonf2 <0.001,1]))
bh2
min(bh2,na.rm=T)
min(bonf2,na.rm=T)
plot(bh1, bh2)
cor((bh1), (bh2), method="pearson")
cor(log10(bh1), log10(bh2), method="pearson")
cor((bh1), (bh2), method="spearman")
plot(bh1, bh2)
cor((bh1), (bh2), method="pearson", use="pairwise.complete.obs")
cor((bh1), (bh2), method="pearson", use="pairwise.complete.obs")
cor(log10(bh1), log10(bh2), method="pearson", use="pairwise.complete.obs")
cor((bh1), (bh2), method="spearman", use="pairwise.complete.obs")
cor(log10(bh1), log10(bh2), method="spearman", use="pairwise.complete.obs")
# Going back to the original data to get all info
RawTable[grep("tryptophan", RawTable$row.identity..main.ID.),]
RawTable[(RawTable$row.m.z - 205.09) < 0.01,]
RawTable[(RawTable$row.m.z - 205.097) < 0.001,]
RawTable[abs(RawTable$row.m.z - 205.097) < 0.001,]
# Going back to the original data to get all info
RawTable[grep("Tryptophan", RawTable$row.identity..main.ID.),]
RawTable[abs(RawTable$row.m.z - 188.07) < 0.001,]
RawTable[abs(RawTable$row.m.z - 188.071) < 0.001,]
# Going back to the original data to get all info
m1 <-  RawTable[grep("Tryptophan", RawTable$row.identity..main.ID.),]
m2 <- RawTable[abs(RawTable$row.m.z - 188.071) < 0.001,]
plot(m1,m2)
m1
# Going back to the original data to get all info
m1 <-  RawTable[grep("Tryptophan", RawTable$row.identity..main.ID.),]
m2 <- RawTable[abs(RawTable$row.m.z - 188.071) < 0.001,]
plot(m1,m2)
m1
m2
View(proteins)
plot(m1[,5:16], m2[,5:16])
plot(t(m1[,5:16]), t(m2[,5:16]))
